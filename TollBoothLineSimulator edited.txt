import java.io.*;
import java.util.Scanner;
import java.util.StringTokenizer;

public class TollBoothLineSimulator {
	

	public static void main(String[] args) throws IOException {
		  int arrivalTime;
		  String vehicleType;
		  int delayTime;
		  int timer;
		  TollBoothLine ManualLines;
		  TollBoothLine AutomaticLines;
		  StringTokenizer stringTokenizer;
		  boolean canRead;
		  int autoMaxWait;
		  int manualMaxWait;
		  int autoVehicleWait;
		  int manualVehicleWait;
		  double totalAutoWait;
		  double totalManualWait;
		  int numberOfAutomaticVehicle;
		  int numberOfManualVehicle;
		  int autoMaxLine[];
		 int manMaxLine[];
		Scanner sc = new Scanner(System.in);
		System.out.print("Input File: ");
		File inputFile = new File(sc.nextLine());
		Scanner scan = new Scanner(inputFile);
		System.out.print("Manual Toll Booths: ");
		int manualTB = sc.nextInt();
		while(manualTB< 1)
		{
			System.out.println("ERROR...ENTER AT LEAST ONE FOR MANUAL");
			System.out.print("Manual Toll Booths: ");
			manualTB = sc.nextInt();
		}
		System.out.print("Automatic Toll Booths: ");
		int automaticTB = sc.nextInt();
		while(automaticTB <1)
		{
			System.out.println("ERROR...ENTER AT LEAST ONE FOR MANUAL");
			System.out.print("Manual Toll Booths: ");
			automaticTB = sc.nextInt();
		}



		// set up auto and manual tbl
		ManualLines = new TollBoothLine(manualTB);
		AutomaticLines = new TollBoothLine(automaticTB);
		// set up max auto and man length
		int maxAutoL[]= new int [automaticTB];
		int maxManL[]= new int [manualTB];
		// set them to 0 initially
		for (int i=0; i<manualTB; i++)
		{
			maxManL[i]=0;
		}
		for (int i=0; i<automaticTB; i++)
		{
			maxAutoL[i]=0;
		}
// set initial timer to 1
		timer = 1;
		String line = null;
		canRead = true;
		while (scan.hasNextLine()) {
			if (canRead) {
				line = scan.nextLine();
			}
			// break line into vehicle attributes
			stringTokenizer = new StringTokenizer(line, ",");
			arrivalTime = Integer.parseInt(stringTokenizer.nextToken());
			if (timer == arrivalTime) {
			
				
				canRead = true;
				vehicleType = stringTokenizer.nextElement().toString();
				if (vehicleType.equals("M")) {
					delayTime = Integer.parseInt(stringTokenizer.nextElement().toString());
					// create new vehicle
					Vehicle v = new Vehicle(arrivalTime, vehicleType, delayTime);
					// insert the vehicle in manualLine
					ManualLines.insert(v);
					// check the maxlength
					for (int i=0; i<manualTB; i++)
					{
						if (ManualLines.getNumItems(i)> maxManL[i]) maxManL[i]= ManualLines.getNumItems(i) ;
					}
					// check if anything has to be deleted and delete it 
					
					for (int i = 0; i < manualTB; i++) {
						for (int j = 0; j < ManualLines.getNumItems(i); j++) {
							if (ManualLines.getNumItems(i) != 0) {
								Vehicle v1 = ManualLines.getVehicleInALine(i, j);
								int deleteTime = v1.getArrivalTime() + v1.delayTime();
								if (deleteTime == (timer)) {
								
									ManualLines.moveUp(i);
								}
							}
						}
					}
					
					
				} else if (vehicleType.equals("A")) {
					delayTime = 1;
					// make new vehicle 
					Vehicle v = new Vehicle(arrivalTime, vehicleType, delayTime);
					// insert vehicle in automatic TBL
					AutomaticLines.insert(v);
					// check the maxlength
					for (int i=0; i<automaticTB; i++)
					{
						if (AutomaticLines.getNumItems(i)> maxAutoL[i]) maxAutoL[i]= AutomaticLines.getNumItems(i) ;
					}
					// System.out.println(v);
					
					// check if anything has to be deleted and delete it 
					
					for (int i = 0; i < automaticTB; i++) {
						for (int j = 0; j < AutomaticLines.getNumItems(i); j++) {
							if (AutomaticLines.getNumItems(i) != 0) {
								Vehicle v1 = AutomaticLines.getVehicleInALine(i, j);
								int deleteTime = v1.getArrivalTime() + v1.delayTime();
								if (deleteTime == (timer)) {
								
									AutomaticLines.moveUp(i);
								}
							}
						}
					}
					
					
				}

			} else if (timer < arrivalTime) {
				canRead = false;
				while (timer != arrivalTime) {
					// check every single vehicle in every single line 
					for (int i = 0; i < manualTB; i++) {
						for (int j = 0; j < ManualLines.getNumItems(i); j++) {
							if (ManualLines.getNumItems(i) != 0) {
								Vehicle v1 = ManualLines.getVehicleInALine(i, j);
								// check if vehicle needs to be deleted if so delete
								int deleteTime = v1.getArrivalTime() + v1.delayTime();
								if (deleteTime == (timer + 1)) {
									
									ManualLines.moveUp(i);

									// System.out.println("deleted Vehicle is "
									// + v);
								}
							}
						}
					}
					
					for (int i = 0; i < automaticTB; i++) {
						for (int j = 0; j < AutomaticLines.getNumItems(i); j++) {
							if (AutomaticLines.getNumItems(i) != 0) {
								Vehicle v = AutomaticLines.getVehicleInALine(i, j);
								// check if vehicle needs to be deleted if so delete
								int deleteTime = v.getArrivalTime() + v.delayTime();
								if (deleteTime == (timer + 1)) {
									

									AutomaticLines.moveUp(i);
									// System.out.println("deleted Vehicle is "
									// + v);
								}
							}
						}
					}
					timer++;
				}
			}

		}
		while (timer < 9000) {
			for (int i = 0; i < manualTB; i++) {
				for (int j = 0; j < ManualLines.getNumItems(i); j++) {
					if (ManualLines.getNumItems(i) != 0) {
						Vehicle v1 = ManualLines.getVehicleInALine(i, j);
						int deleteTime = v1.getArrivalTime() + v1.delayTime();
						if (deleteTime == (timer + 1)) {
						
							ManualLines.moveUp(i);

							// System.out.println("deleted Vehicle is " + v);
						}
					}
				}
			}
			for (int i = 0; i < automaticTB; i++) {
				for (int j = 0; j < AutomaticLines.getNumItems(i); j++) {
					if (AutomaticLines.getNumItems(i) != 0) {
						Vehicle v = AutomaticLines.getVehicleInALine(i, j);
						int deleteTime = v.getArrivalTime() + v.delayTime();
						if (deleteTime == (timer + 1)) {
												

							AutomaticLines.moveUp(i);
							// System.out.println("deleted Vehicle is " + v);
						}
					}
				}
			}
			timer++;
		}
		for (int k = 0; k < manualTB; k++) {
			System.out.println("Manual Line " + (k + 1) + " Maximum Length= " + maxManL[k]);

		}
		for (int k = 0; k < automaticTB; k++) {
			System.out.println("Automatic Line " + (k + 1) + " Maximum Length= " +  maxAutoL[k]);

		}
	

		// for (int k=0; k<automaticTB; k++ )
		// {
		// if (AutomaticLines.getMaxLength(k)>maxWait) maxWait=
		// AutomaticLines.getMaxLength(k);
		// }
		// System.out.println("Max Automatic Wait = " + (maxWait*1));

	}
}
