import java.io.*;
import java.util.*;
public class TollBoothLineSimulator {
	 public static ArrayList<Vehicle> fileVehicles= new ArrayList<Vehicle>();
	 public static int arrivalTime;
	 public static String vehicleType;
	 public static int delayTime; 
	 public static int timer;
	 public static TollBoothLine[] ManualLines;
	 public static TollBoothLine[] AutomaticLines;
	 // we should call it delayTime instead of number of wheels because we don't have the number of wheel of manual

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.print("Input File: ");
		File inputFile =  new File(sc.nextLine());
		Scanner scan = new Scanner(inputFile);
		Scanner scan1 = new Scanner(inputFile);
		System.out.print("Manual Toll Booths: ");
		int manualTB = sc.nextInt();
		System.out.print("Automatic Toll Booths: ");
		int automaticTB = sc.nextInt();
		
		 ManualLines = new TollBoothLine[manualTB];
		 AutomaticLines = new TollBoothLine[automaticTB];
		
		while (scan.hasNextLine())
		{
			
			 String vehicleInFile= scan.nextLine();
			 StringTokenizer stringTokenizer = new StringTokenizer(vehicleInFile, ",");
			 arrivalTime= Integer.parseInt(stringTokenizer.nextElement().toString());
			 vehicleType = stringTokenizer.nextElement().toString();
			 if  (vehicleType.equals("M"))
			 {
				 delayTime = Integer.parseInt(stringTokenizer.nextElement().toString());
			 }
			 else delayTime = 1;
			 Vehicle v= new Vehicle (arrivalTime, vehicleType, delayTime);
			 fileVehicles.insert(v);
			
		}
		
		int timer= 1;
		int numberOfVehiclesInManualLines=0;
		int numberOfVehiclesInAutomaticLines=0;
				
		for (int i=0; i<fileVehicles.size(); i++)
		{
			Vehicle vehicle = fileVehicles.indexOf(i);
			if (vehicle.getArrivalTime()==timer && vehicle.getVehicleType().equals("M"))
			{
				ManualLines.insert(vehicle);
				numberOfVehiclesInManualLines++;
			}
			else if (vehicle.getArrivalTime()==timer && vehicle.getVehicleType().equals("A"))
			{
				AutomaticLines.insert(vehicle);
				numberOfVehiclesInAutomaticLines++;
			}
			else 
			{
				int numberOfVehiclesInLines= numberOfVehiclesInManualLines + numberOfVehiclesInAutomaticLines;
				int lastTimer= timer;
				timer++;
				
				for (int j=0; j<numberOfVehiclesInLines; j++)
				{
					Vehicle v2= fileVehicles.indexOf(j);
					int deleteTime= lastTimer+ v2.getDelayTime();
					if (timer== deleteTime && v2.getVehicleType().equal("M")) 
					{
						ManualLines.moveUp(ManualLines.isThere(v2));
					}
					else if (timer== deleteTime && v2.getVehicleType().equal("A")) 
					{
						AutomaticLines.moveUp(AutomaticLines.isThere(v2));
					}
				}
			}
			
		}
		
		for (int k=0; k<manualTB; k++ )
		{
			System.out.println("Manual Line " + k + " Maximum Length= " + ManualLines.getMaxLenght(k));
			
		}
		for (int k=0; k<automaticTB; k++ )
		{
			System.out.println("Manual Line " + k + " Maximum Length= " + AutomaticLines.getMaxLenght(k));
			
		}

	}

}
